c
User.where(email: record.email).present?
value
attribute
record.Model
record.class
record.model
ModelName.validators
ModelName
model.name
model
record
.
record
exit
rails s
exit
@current_user.email.uniqueness?
@current_user.email
@current_user
user.email.invalid?
next
exit
next
user
@current_user
next
user
@current_user
next
user.invalid?
user.nil?
user
next
request.headers['token'].first_name
request.headers['token'].user
request.headers['token']
exit
@current_user
next
@current_user
next
user
next
user
exit
@current_user
next
user
@current_user
next
user
exit
@current_user
next
user
exit
@current_user
user
next
request.headers['token']
exit
author_id
@post
@current_user
exit
 User.where(email: form.email)
@user
exit
 User.where(email: form.email)
User.first
@user
exit
BCrypt::Password.new(@user.password) == form.password
BCrypt::Password.new(@user.password)
form.password
form
email: form.email
User.where(email: form.email).first
@user
c
next
form
 User.where(email: form.email).first
 User.where(email: form.email)
User.where(email: form.email).first
@user
exit
@user
next
exit
v
exit
@user
email
@user.email
@user.first_name
@user.gender
@user
exit
format_name(user)
user
c
format_name(@users.first)
@users.first
@user.first
@users
c
params
form
exit
 @last_name_kana 
params[:last_name_kana]
exit
form
@user
exit
form.errors.full_messages
form.errors
form.invalid?
form.error
form.nil?
form.last_name
form
@user.first_name
@user
exit
@user
exit
birth_date
@user
exit
@current_user
@user
next
exit
@users
exit
@users
next
exit
@article
exit
@article
@article.update(title: "aaa", description: "aaaaaaaa")
@article.update(article_params)
@article.update
@article
@article.save
@article.save?
next
@article
c
exit
n
@articles
c
